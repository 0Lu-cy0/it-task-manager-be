openapi: 3.0.0
info:
  title: IT Task Manager API
  version: 1.0.0
  description: |
    ## üöÄ IT Task Manager Backend API
    
    H·ªá th·ªëng backend qu·∫£n l√Ω c√¥ng vi·ªác v√† d·ª± √°n cho c√°c team IT.
    
    ### üîê X√°c th·ª±c
    API s·ª≠ d·ª•ng JWT Bearer Token ƒë·ªÉ x√°c th·ª±c. ƒê·ªÉ s·ª≠ d·ª•ng c√°c endpoint ƒë∆∞·ª£c b·∫£o v·ªá:
    1. ƒêƒÉng nh·∫≠p qua `/auth/login` ƒë·ªÉ l·∫•y access token
    2. Th√™m header: `Authorization: Bearer {your_token}`
    
    ### üìä Ph√¢n quy·ªÅn
    - **Owner**: To√†n quy·ªÅn, c√≥ th·ªÉ b·∫≠t Free Mode
    - **Lead**: Qu·∫£n l√Ω th√†nh vi√™n v√† tasks
    - **Member**: T·∫°o v√† ch·ªânh s·ª≠a tasks
    - **Viewer**: Ch·ªâ xem
  contact:
    name: IT Task Manager Team
    email: support@ittaskmanager.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8181
    description: Development server

tags:
  - name: User
    description: X√°c th·ª±c v√† qu·∫£n l√Ω t√†i kho·∫£n ng∆∞·ªùi d√πng
  - name: Project
    description: Qu·∫£n l√Ω d·ª± √°n v√† th√†nh vi√™n
  - name: Task
    description: Qu·∫£n l√Ω nhi·ªám v·ª• v√† ph√¢n c√¥ng

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT token ƒë·ªÉ x√°c th·ª±c. Format: Bearer {token}"

  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          example: "64f8a1b2c3d4e5f6a7b8c9d0"
        email:
          type: string
          format: email
          example: "john@example.com"
        full_name:
          type: string
          example: "John Doe"
        phone:
          type: string
          example: "0912345678"
        department:
          type: string
          example: "QA"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Project:
      type: object
      properties:
        _id:
          type: string
          example: "64f8a1b2c3d4e5f6a7b8c9d0"
        name:
          type: string
          example: "Website Redesign"
        description:
          type: string
          example: "Redesign company website with modern UI/UX"
        status:
          type: string
          enum: [planning, in_progress, testing, completed]
          example: "in_progress"
        priority:
          type: string
          enum: [low, medium, high]
          example: "high"
        created_by:
          type: string
          example: "64f8a1b2c3d4e5f6a7b8c9d0"
        members:
          type: array
          items:
            type: object
            properties:
              user_id:
                type: string
              project_role_id:
                type: string
              joined_at:
                type: string
                format: date-time
        member_count:
          type: number
          example: 5
        free_mode:
          type: boolean
          example: false
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Task:
      type: object
      properties:
        _id:
          type: string
          example: "64f8a1b2c3d4e5f6a7b8c9d0"
        title:
          type: string
          example: "Design homepage mockup"
        description:
          type: string
          example: "Create wireframes and mockups for the new homepage"
        status:
          type: string
          enum: [todo, in_progress, testing, completed]
          example: "todo"
        priority:
          type: string
          enum: [low, medium, high]
          example: "medium"
        project_id:
          type: string
          example: "64f8a1b2c3d4e5f6a7b8c9d0"
        created_by:
          type: string
          example: "64f8a1b2c3d4e5f6a7b8c9d0"
        due_date:
          type: string
          format: date-time
          example: "2024-02-01T10:00:00.000Z"
        completed_at:
          type: string
          format: date-time
        assignees:
          type: array
          items:
            type: object
            properties:
              user_id:
                type: string
              role_id:
                type: string
              assigned_by:
                type: string
              assigned_at:
                type: string
                format: date-time
        tags:
          type: array
          items:
            type: string
          example: ["design", "frontend"]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Notification:
      type: object
      properties:
        _id:
          type: string
          example: "64f8a1b2c3d4e5f6a7b8c9d0"
        title:
          type: string
          example: "New task assigned"
        message:
          type: string
          example: "You have been assigned to a new task"
        type:
          type: string
          enum: [task_assigned, project_invite, task_completed]
          example: "task_assigned"
        read:
          type: boolean
          example: false
        user_id:
          type: string
          example: "64f8a1b2c3d4e5f6a7b8c9d0"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ApiResponse:
      type: object
      properties:
        status:
          type: string
          enum: [success, error]
          example: "success"
        message:
          type: string
          example: "Operation completed successfully"
        data:
          type: object

    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          example: "error"
        message:
          type: string
          example: "Validation failed"
        errors:
          type: array
          items:
            type: object

  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

    ForbiddenError:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

    ValidationError:
      description: Validation failed
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

paths:
  /auth/register:
    post:
      tags:
        - User
      summary: ƒêƒÉng k√Ω
      description: T·∫°o t√†i kho·∫£n ng∆∞·ªùi d√πng m·ªõi v·ªõi email v√† m·∫≠t kh·∫©u
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - full_name
              properties:
                email:
                  type: string
                  format: email
                  example: "test@gmail.com"
                password:
                  type: string
                  minLength: 6
                  example: "Cu0123456789"
                full_name:
                  type: string
                  minLength: 2
                  maxLength: 50
                  example: "C∆∞·ªùng Nguy·ªÖn"
      responses:
        "201":
          description: ƒêƒÉng k√Ω th√†nh c√¥ng
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          token:
                            type: string
                            description: JWT token for authentication
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "429":
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/login:
    post:
      tags:
        - User
      summary: ƒêƒÉng nh·∫≠p
      description: X√°c th·ª±c ng∆∞·ªùi d√πng v√† tr·∫£ v·ªÅ JWT tokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "nc12042004@gmail.com"
                password:
                  type: string
                  example: "Cu0123456789"
      responses:
        "201":
          description: ƒêƒÉng nh·∫≠p th√†nh c√¥ng
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          accessToken:
                            type: string
                            description: JWT access token
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "429":
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/reset-password/request:
    post:
      tags:
        - User
      summary: Y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
      description: G·ª≠i email reset m·∫≠t kh·∫©u ƒë·∫øn ng∆∞·ªùi d√πng
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: "nc12042004@gmail.com"
      responses:
        "200":
          description: Email reset ƒë√£ ƒë∆∞·ª£c g·ª≠i
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "429":
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/reset-password/confirm:
    post:
      tags:
        - User
      summary: X√°c nh·∫≠n ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
      description: ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u m·ªõi v·ªõi token t·ª´ email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - resetToken
                - newPassword
                - confirmPassword
              properties:
                resetToken:
                  type: string
                  example: "3c6baf09f717db15dadd5f8fab0e999e089fa6e061c5c226c78c4001842c84fc"
                newPassword:
                  type: string
                  example: "newpassword234"
                confirmPassword:
                  type: string
                  example: "newpassword234"
      responses:
        "200":
          description: M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "429":
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/me:
    get:
      tags:
        - User
      summary: L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
      description: Tr·∫£ v·ªÅ th√¥ng tin chi ti·∫øt c·ªßa ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Th√¥ng tin ng∆∞·ªùi d√πng
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    
    put:
      tags:
        - User
      summary: C·∫≠p nh·∫≠t h·ªì s∆°
      description: C·∫≠p nh·∫≠t th√¥ng tin profile c·ªßa ng∆∞·ªùi d√πng
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                full_name:
                  type: string
                  example: "Nguy·ªÖn VƒÉn A"
                phone:
                  type: string
                  example: "0912345678"
                department:
                  type: string
                  example: "QA"
      responses:
        "200":
          description: C·∫≠p nh·∫≠t th√†nh c√¥ng
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/User"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/me/password:
    put:
      tags:
        - User
      summary: ƒê·ªïi m·∫≠t kh·∫©u
      description: Thay ƒë·ªïi m·∫≠t kh·∫©u c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - currentPassword
                - newPassword
                - confirmPassword
              properties:
                currentPassword:
                  type: string
                  example: "C12345678"
                newPassword:
                  type: string
                  example: "Cu123456789"
                confirmPassword:
                  type: string
                  example: "Cu123456789"
      responses:
        "200":
          description: ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/refresh:
    get:
      tags:
        - User
      summary: Refresh token
      description: L√†m m·ªõi access token
      responses:
        "200":
          description: Token m·ªõi ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
    post:
      tags:
        - User
      summary: Refresh token (POST)
      description: L√†m m·ªõi access token
      responses:
        "200":
          description: Token m·ªõi ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "429":
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/logout:
    post:
      tags:
        - User
      summary: ƒêƒÉng xu·∫•t
      description: V√¥ hi·ªáu h√≥a refresh token v√† ƒëƒÉng xu·∫•t ng∆∞·ªùi d√πng
      security:
        - bearerAuth: []
      responses:
        "200":
          description: ƒêƒÉng xu·∫•t th√†nh c√¥ng
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /home/projects:
    get:
      tags:
        - Project
      summary: L·∫•y t·∫•t c·∫£ project ra
      description: Tr·∫£ v·ªÅ danh s√°ch t·∫•t c·∫£ d·ª± √°n m√† ng∆∞·ªùi d√πng tham gia
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Danh s√°ch d·ª± √°n
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Project"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

    post:
      tags:
        - Project
      summary: T·∫°o m·ªõi project
      description: T·∫°o m·ªôt d·ª± √°n m·ªõi v·ªõi ng∆∞·ªùi t·∫°o l√†m Owner
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - description
                - created_by
                - status
                - priority
              properties:
                name:
                  type: string
                  example: "Project 4"
                description:
                  type: string
                  example: "ƒê√¢y l√† project ƒë∆∞·ª£c t·∫°o ra v√†o ng√†y 8/9/2025"
                created_by:
                  type: string
                  example: "68b5c09af20ed9b7c288e599"
                status:
                  type: string
                  enum: [planning, in_progress, testing, completed]
                  example: "planning"
                priority:
                  type: string
                  enum: [low, medium, high]
                  example: "low"
      responses:
        "201":
          description: D·ª± √°n ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Project"
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /home/projects/{projectId}:
    get:
      tags:
        - Project
      summary: L·∫•y th√¥ng tin chi ti·∫øt project
      description: Tr·∫£ v·ªÅ th√¥ng tin chi ti·∫øt c·ªßa m·ªôt d·ª± √°n
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
          description: ID c·ªßa d·ª± √°n
          example: "688f707517d1857885e3612f"
      responses:
        "200":
          description: Chi ti·∫øt d·ª± √°n
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Project"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

    put:
      tags:
        - Project
      summary: Update project
      description: C·∫≠p nh·∫≠t th√¥ng tin d·ª± √°n
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
          description: ID c·ªßa d·ª± √°n
          example: "688f707517d1857885e3612f"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Project Moi"
                description:
                  type: string
                  example: "ƒê√¢y l√† project test API update"
                status:
                  type: string
                  enum: [planning, in_progress, testing, completed]
                  example: "in_progress"
                priority:
                  type: string
                  enum: [low, medium, high]
                  example: "medium"
      responses:
        "200":
          description: C·∫≠p nh·∫≠t th√†nh c√¥ng
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Project"
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

    delete:
      tags:
        - Project
      summary: X√≥a m·ªÅm project
      description: X√≥a m·ªÅm d·ª± √°n
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
          description: ID c·ªßa d·ª± √°n
          example: "688f707517d1857885e3612f"
      responses:
        "200":
          description: X√≥a th√†nh c√¥ng
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /home/projects/{projectId}/members/{userId}:
    delete:
      tags:
        - Project
      summary: X√≥a th√†nh vi√™n kh·ªèi project
      description: X√≥a m·ªôt th√†nh vi√™n kh·ªèi d·ª± √°n
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
          description: ID c·ªßa d·ª± √°n
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: ID c·ªßa ng∆∞·ªùi d√πng
      responses:
        "200":
          description: X√≥a th√†nh vi√™n th√†nh c√¥ng
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /home/projects/{projectId}/roles:
    get:
      tags:
        - Project
      summary: L·∫•y danh s√°ch vai tr√≤ trong project
      description: Tr·∫£ v·ªÅ danh s√°ch vai tr√≤ c·ªßa c√°c th√†nh vi√™n trong d·ª± √°n
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
          description: ID c·ªßa d·ª± √°n
      responses:
        "200":
          description: Danh s√°ch vai tr√≤
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

    put:
      tags:
        - Project
      summary: C·∫≠p nh·∫≠t vai tr√≤ th√†nh vi√™n
      description: C·∫≠p nh·∫≠t vai tr√≤ cho th√†nh vi√™n trong d·ª± √°n
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
          description: ID c·ªßa d·ª± √°n
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                change:
                  type: array
                  items:
                    type: object
                    properties:
                      user_id:
                        type: string
                      project_role_id:
                        type: string
      responses:
        "200":
          description: C·∫≠p nh·∫≠t vai tr√≤ th√†nh c√¥ng
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /home/projects/{projectId}/free-mode:
    patch:
      tags:
        - Project
      summary: B·∫≠t/t·∫Øt Free Mode
      description: B·∫≠t ho·∫∑c t·∫Øt ch·∫ø ƒë·ªô Free Mode cho d·ª± √°n
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
          description: ID c·ªßa d·ª± √°n
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                free_mode:
                  type: string
                  enum: ["true", "false"]
                  example: "false"
      responses:
        "200":
          description: C·∫≠p nh·∫≠t Free Mode th√†nh c√¥ng
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        type: object
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /home/tasks:
    get:
      tags:
        - Task
      summary: L·∫•y d·ªØ li·ªáu task
      description: Tr·∫£ v·ªÅ danh s√°ch t·∫•t c·∫£ task m√† ng∆∞·ªùi d√πng c√≥ quy·ªÅn xem
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Danh s√°ch task
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Task"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

    post:
      tags:
        - Task
      summary: T·∫°o task m·ªõi
      description: T·∫°o m·ªôt task m·ªõi trong d·ª± √°n
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - status
                - priority
                - project_id
                - due_date
              properties:
                title:
                  type: string
                  example: "Task 7 - Test route create task"
                status:
                  type: string
                  enum: [todo, in_progress, testing, completed]
                  example: "testing"
                priority:
                  type: string
                  enum: [low, medium, high]
                  example: "low"
                project_id:
                  type: string
                  example: "68c7ce08d391ede9370c88c4"
                due_date:
                  type: string
                  format: date-time
                  example: "2025-09-25T08:30:20.332+00:00"
      responses:
        "201":
          description: Task ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Task"
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /home/tasks/{projectId}:
    post:
      tags:
        - Task
      summary: T·∫°o task trong project c·ª• th·ªÉ
      description: T·∫°o m·ªôt task m·ªõi trong d·ª± √°n c·ª• th·ªÉ
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
          description: ID c·ªßa d·ª± √°n
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - status
                - priority
                - due_date
              properties:
                title:
                  type: string
                  example: "New task in project"
                status:
                  type: string
                  enum: [todo, in_progress, testing, completed]
                  example: "todo"
                priority:
                  type: string
                  enum: [low, medium, high]
                  example: "medium"
                due_date:
                  type: string
                  format: date-time
                  example: "2025-09-25T08:30:20.332+00:00"
      responses:
        "201":
          description: Task ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Task"
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /home/tasks/{projectId}/{id}:
    get:
      tags:
        - Task
      summary: L·∫•y th√¥ng tin chi ti·∫øt task
      description: Tr·∫£ v·ªÅ th√¥ng tin chi ti·∫øt c·ªßa m·ªôt task
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
          description: ID c·ªßa d·ª± √°n
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID c·ªßa task
      responses:
        "200":
          description: Chi ti·∫øt task
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Task"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

    put:
      tags:
        - Task
      summary: C·∫≠p nh·∫≠t task
      description: C·∫≠p nh·∫≠t th√¥ng tin c·ªßa m·ªôt task
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
          description: ID c·ªßa d·ª± √°n
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID c·ªßa task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Updated task title"
                description:
                  type: string
                  example: "Updated task description"
                status:
                  type: string
                  enum: [todo, in_progress, testing, completed]
                  example: "in_progress"
                priority:
                  type: string
                  enum: [low, medium, high]
                  example: "high"
                due_date:
                  type: string
                  format: date-time
      responses:
        "200":
          description: C·∫≠p nh·∫≠t task th√†nh c√¥ng
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Task"
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

    delete:
      tags:
        - Task
      summary: X√≥a task
      description: X√≥a m·ªôt task
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
          description: ID c·ªßa d·ª± √°n
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID c·ªßa task
      responses:
        "200":
          description: X√≥a task th√†nh c√¥ng
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /home/tasks/{projectId}/{id}/assign:
    post:
      tags:
        - Task
      summary: G√°n user cho task
      description: G√°n m·ªôt ng∆∞·ªùi d√πng v√†o task
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
          description: ID c·ªßa d·ª± √°n
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID c·ªßa task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  example: "64f8a1b2c3d4e5f6a7b8c9d0"
      responses:
        "200":
          description: G√°n user th√†nh c√¥ng
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Task"
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /home/tasks/{projectId}/{id}/unassign:
    post:
      tags:
        - Task
      summary: G·ª° user ra kh·ªèi task
      description: G·ª° m·ªôt ng∆∞·ªùi d√πng kh·ªèi task
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
          description: ID c·ªßa d·ª± √°n
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID c·ªßa task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  example: "64f8a1b2c3d4e5f6a7b8c9d0"
      responses:
        "200":
          description: G·ª° user th√†nh c√¥ng
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Task"
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /home/tasks/{projectId}/{id}/status:
    patch:
      tags:
        - Task
      summary: C·∫≠p nh·∫≠t status task
      description: C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa task
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
          description: ID c·ªßa d·ª± √°n
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID c·ªßa task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [todo, in_progress, testing, completed]
                  example: "completed"
      responses:
        "200":
          description: C·∫≠p nh·∫≠t status th√†nh c√¥ng
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Task"
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /home/dashboards:
    get:
      tags:
        - Project
      summary: L·∫•y d·ªØ li·ªáu dashboard
      description: Tr·∫£ v·ªÅ th·ªëng k√™ t·ªïng quan cho dashboard
      security:
        - bearerAuth: []
      responses:
        "200":
          description: D·ªØ li·ªáu dashboard
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        type: object
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /home/dashboards/recent:
    get:
      tags:
        - Project
      summary: L·∫•y d·ª± √°n g·∫ßn ƒë√¢y
      description: Tr·∫£ v·ªÅ danh s√°ch c√°c d·ª± √°n ƒë∆∞·ª£c truy c·∫≠p g·∫ßn ƒë√¢y
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Danh s√°ch d·ª± √°n g·∫ßn ƒë√¢y
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          allOf:
                            - $ref: "#/components/schemas/Project"
                            - type: object
                              properties:
                                last_accessed:
                                  type: string
                                  format: date-time
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /home/invites/{projectId}/inviteLink:
    post:
      tags:
        - Project
      summary: T·∫°o l·ªùi m·ªùi v√†o project
      description: T·∫°o link l·ªùi m·ªùi ƒë·ªÉ m·ªùi ng∆∞·ªùi d√πng v√†o d·ª± √°n
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
          description: ID c·ªßa d·ª± √°n
          example: "688f707517d1857885e3612f"
      responses:
        "201":
          description: T·∫°o l·ªùi m·ªùi th√†nh c√¥ng
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          inviteToken:
                            type: string
                            description: Token ƒë·ªÉ tham gia d·ª± √°n
                          inviteLink:
                            type: string
                            description: Link l·ªùi m·ªùi ƒë·∫ßy ƒë·ªß
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "429":
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /home/invites/{token}:
    get:
      tags:
        - Project
      summary: Nh·∫•p v√†o link l·ªùi m·ªùi
      description: X·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫•p v√†o link l·ªùi m·ªùi
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
          description: Token l·ªùi m·ªùi
          example: "ae360a4596019ce152914c056361ca938a0faea42593e06676d689bc34b5650e"
      responses:
        "200":
          description: Th√¥ng tin l·ªùi m·ªùi
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          project:
                            $ref: "#/components/schemas/Project"
                          inviter:
                            $ref: "#/components/schemas/User"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /home/project-roles/{projectId}/roles/{roleId}/permissions:
    get:
      tags:
        - Project
      summary: L·∫•y danh s√°ch permission c·ªßa role
      description: Tr·∫£ v·ªÅ danh s√°ch quy·ªÅn c·ªßa m·ªôt vai tr√≤ trong d·ª± √°n
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
          description: ID c·ªßa d·ª± √°n
        - in: path
          name: roleId
          required: true
          schema:
            type: string
          description: ID c·ªßa vai tr√≤
      responses:
        "200":
          description: Danh s√°ch quy·ªÅn
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

    post:
      tags:
        - Project
      summary: Th√™m permission v√†o role
      description: Th√™m quy·ªÅn m·ªõi v√†o vai tr√≤
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
          description: ID c·ªßa d·ª± √°n
        - in: path
          name: roleId
          required: true
          schema:
            type: string
          description: ID c·ªßa vai tr√≤
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                permissionId:
                  type: string
                  example: "64f7b1c8e29b41d4a7160037"
      responses:
        "200":
          description: Th√™m quy·ªÅn th√†nh c√¥ng
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          $ref: "#/components/responses/NotFoundError"

    delete:
      tags:
        - Project
      summary: X√≥a t·∫•t c·∫£ permission kh·ªèi role
      description: X√≥a t·∫•t c·∫£ quy·ªÅn kh·ªèi vai tr√≤
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
          description: ID c·ªßa d·ª± √°n
        - in: path
          name: roleId
          required: true
          schema:
            type: string
          description: ID c·ªßa vai tr√≤
      responses:
        "200":
          description: X√≥a quy·ªÅn th√†nh c√¥ng
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /home/project-roles/{projectId}/roles/{roleId}/permissions/{permissionId}:
    delete:
      tags:
        - Project
      summary: X√≥a permission c·ª• th·ªÉ kh·ªèi role
      description: X√≥a m·ªôt quy·ªÅn c·ª• th·ªÉ kh·ªèi vai tr√≤
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
          description: ID c·ªßa d·ª± √°n
        - in: path
          name: roleId
          required: true
          schema:
            type: string
          description: ID c·ªßa vai tr√≤
        - in: path
          name: permissionId
          required: true
          schema:
            type: string
          description: ID c·ªßa quy·ªÅn
      responses:
        "200":
          description: X√≥a quy·ªÅn th√†nh c√¥ng
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /home/search:
    get:
      tags:
        - Project
      summary: T√¨m ki·∫øm t·ªïng h·ª£p
      description: T√¨m ki·∫øm trong projects, tasks v√† users
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: T·ª´ kh√≥a t√¨m ki·∫øm
          example: "design"
      responses:
        "200":
          description: K·∫øt qu·∫£ t√¨m ki·∫øm
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          projects:
                            type: array
                            items:
                              $ref: "#/components/schemas/Project"
                          tasks:
                            type: array
                            items:
                              $ref: "#/components/schemas/Task"
                          users:
                            type: array
                            items:
                              $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /home/search/projects:
    get:
      tags:
        - Project
      summary: T√¨m ki·∫øm projects
      description: T√¨m ki·∫øm trong danh s√°ch d·ª± √°n
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: T·ª´ kh√≥a t√¨m ki·∫øm
          example: "website"
      responses:
        "200":
          description: K·∫øt qu·∫£ t√¨m ki·∫øm projects
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Project"
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /home/search/tasks:
    get:
      tags:
        - Task
      summary: T√¨m ki·∫øm tasks
      description: T√¨m ki·∫øm trong danh s√°ch nhi·ªám v·ª•
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: T·ª´ kh√≥a t√¨m ki·∫øm
          example: "design"
      responses:
        "200":
          description: K·∫øt qu·∫£ t√¨m ki·∫øm tasks
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Task"
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /home/search/users:
    get:
      tags:
        - User
      summary: T√¨m ki·∫øm users
      description: T√¨m ki·∫øm trong danh s√°ch ng∆∞·ªùi d√πng
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: T·ª´ kh√≥a t√¨m ki·∫øm
          example: "john"
      responses:
        "200":
          description: K·∫øt qu·∫£ t√¨m ki·∫øm users
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /home/noti:
    get:
      tags:
        - User
      summary: L·∫•y danh s√°ch th√¥ng b√°o
      description: Tr·∫£ v·ªÅ danh s√°ch th√¥ng b√°o c·ªßa ng∆∞·ªùi d√πng
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Danh s√°ch th√¥ng b√°o
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Notification"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

    delete:
      tags:
        - User
      summary: X√≥a t·∫•t c·∫£ th√¥ng b√°o
      description: X√≥a t·∫•t c·∫£ th√¥ng b√°o c·ªßa ng∆∞·ªùi d√πng
      security:
        - bearerAuth: []
      responses:
        "200":
          description: X√≥a th√¥ng b√°o th√†nh c√¥ng
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /home/noti/{notiId}:
    get:
      tags:
        - User
      summary: L·∫•y chi ti·∫øt th√¥ng b√°o
      description: Tr·∫£ v·ªÅ th√¥ng tin chi ti·∫øt c·ªßa m·ªôt th√¥ng b√°o
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: notiId
          required: true
          schema:
            type: string
          description: ID c·ªßa th√¥ng b√°o
      responses:
        "200":
          description: Chi ti·∫øt th√¥ng b√°o
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Notification"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"

    patch:
      tags:
        - User
      summary: ƒê√°nh d·∫•u th√¥ng b√°o ƒë√£ ƒë·ªçc
      description: C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë√£ ƒë·ªçc cho th√¥ng b√°o
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: notiId
          required: true
          schema:
            type: string
          description: ID c·ªßa th√¥ng b√°o
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                read:
                  type: boolean
                  example: true
      responses:
        "200":
          description: C·∫≠p nh·∫≠t th√¥ng b√°o th√†nh c√¥ng
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Notification"
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"

    delete:
      tags:
        - User
      summary: X√≥a th√¥ng b√°o
      description: X√≥a m·ªôt th√¥ng b√°o c·ª• th·ªÉ
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: notiId
          required: true
          schema:
            type: string
          description: ID c·ªßa th√¥ng b√°o
      responses:
        "200":
          description: X√≥a th√¥ng b√°o th√†nh c√¥ng
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"