openapi: 3.0.0
info:
  title: IT Task Manager API
  version: 1.0.0
  description: |
    ## üöÄ IT Task Manager Backend API
    
    H·ªá th·ªëng backend qu·∫£n l√Ω c√¥ng vi·ªác v√† d·ª± √°n cho c√°c team IT.
    
    ### üîê X√°c th·ª±c
    API s·ª≠ d·ª•ng JWT Bearer Token ƒë·ªÉ x√°c th·ª±c. ƒê·ªÉ s·ª≠ d·ª•ng c√°c endpoint ƒë∆∞·ª£c b·∫£o v·ªá:
    1. ƒêƒÉng nh·∫≠p qua `/auth/login` ƒë·ªÉ l·∫•y access token
    2. Th√™m header: `Authorization: Bearer {your_token}`
    
    ### üìä Ph√¢n quy·ªÅn
    - **Owner**: To√†n quy·ªÅn, c√≥ th·ªÉ b·∫≠t Free Mode
    - **Lead**: Qu·∫£n l√Ω th√†nh vi√™n v√† tasks
    - **Member**: T·∫°o v√† ch·ªânh s·ª≠a tasks
    - **Viewer**: Ch·ªâ xem
    
    ### üîÑ Rate Limiting
    - Auth endpoints: 10 requests/15 ph√∫t
    - Invite endpoints: 5 requests/1 gi·ªù
    - Other endpoints: 100 requests/15 ph√∫t
  contact:
    name: IT Task Manager Team
    email: support@ittaskmanager.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8181
    description: Development server

tags:
  - name: Authentication
    description: X√°c th·ª±c v√† qu·∫£n l√Ω t√†i kho·∫£n
  - name: Projects
    description: Qu·∫£n l√Ω d·ª± √°n v√† th√†nh vi√™n
  - name: Tasks
    description: Qu·∫£n l√Ω nhi·ªám v·ª• v√† ph√¢n c√¥ng
  - name: Dashboard
    description: Th·ªëng k√™ v√† b√°o c√°o
  - name: Invitations
    description: H·ªá th·ªëng m·ªùi th√†nh vi√™n
  - name: Project Roles
    description: Qu·∫£n l√Ω vai tr√≤ v√† quy·ªÅn h·∫°n
  - name: Search
    description: T√¨m ki·∫øm to√†n c·ª•c
  - name: Notifications
    description: H·ªá th·ªëng th√¥ng b√°o

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT token ƒë·ªÉ x√°c th·ª±c. Format: Bearer {token}"

  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          example: "64f8a1b2c3d4e5f6a7b8c9d0"
        username:
          type: string
          example: "john_doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        full_name:
          type: string
          example: "John Doe"
        avatar:
          type: string
          example: "https://example.com/avatar.jpg"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Project:
      type: object
      properties:
        _id:
          type: string
          example: "64f8a1b2c3d4e5f6a7b8c9d0"
        name:
          type: string
          example: "Website Redesign"
        description:
          type: string
          example: "Redesign company website with modern UI/UX"
        status:
          type: string
          enum: [planning, in_progress, testing, completed]
          example: "in_progress"
        priority:
          type: string
          enum: [low, medium, high]
          example: "high"
        start_date:
          type: string
          format: date
          example: "2024-01-15"
        end_date:
          type: string
          format: date
          example: "2024-03-15"
        created_by:
          type: string
          example: "64f8a1b2c3d4e5f6a7b8c9d0"
        members:
          type: array
          items:
            type: object
            properties:
              user_id:
                type: string
              project_role_id:
                type: string
              joined_at:
                type: string
                format: date-time
        member_count:
          type: number
          example: 5
        free_mode:
          type: boolean
          example: false
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Task:
      type: object
      properties:
        _id:
          type: string
          example: "64f8a1b2c3d4e5f6a7b8c9d0"
        title:
          type: string
          example: "Design homepage mockup"
        description:
          type: string
          example: "Create wireframes and mockups for the new homepage"
        status:
          type: string
          enum: [todo, in_progress, testing, completed]
          example: "todo"
        priority:
          type: string
          enum: [low, medium, high]
          example: "medium"
        project_id:
          type: string
          example: "64f8a1b2c3d4e5f6a7b8c9d0"
        created_by:
          type: string
          example: "64f8a1b2c3d4e5f6a7b8c9d0"
        due_date:
          type: string
          format: date
          example: "2024-02-01"
        completed_at:
          type: string
          format: date-time
        assignees:
          type: array
          items:
            type: object
            properties:
              user_id:
                type: string
              role_id:
                type: string
              assigned_by:
                type: string
              assigned_at:
                type: string
                format: date-time
        tags:
          type: array
          items:
            type: string
          example: ["design", "frontend"]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Notification:
      type: object
      properties:
        _id:
          type: string
          example: "64f8a1b2c3d4e5f6a7b8c9d0"
        user_id:
          type: string
          example: "64f8a1b2c3d4e5f6a7b8c9d0"
        title:
          type: string
          example: "New task assigned"
        message:
          type: string
          example: "You have been assigned to task: Design homepage mockup"
        type:
          type: string
          enum: [task_assigned, project_invite, task_completed, project_update]
          example: "task_assigned"
        is_read:
          type: boolean
          example: false
        related_id:
          type: string
          example: "64f8a1b2c3d4e5f6a7b8c9d0"
        createdAt:
          type: string
          format: date-time

    ApiResponse:
      type: object
      properties:
        status:
          type: string
          enum: [success, error]
          example: "success"
        message:
          type: string
          example: "Operation completed successfully"
        data:
          type: object
        errors:
          type: array
          items:
            type: object

    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          example: "error"
        message:
          type: string
          example: "Validation failed"
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string

  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            status: "error"
            message: "Unauthorized access"

    ForbiddenError:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            status: "error"
            message: "Forbidden: Insufficient permissions"

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            status: "error"
            message: "Resource not found"

    ValidationError:
      description: Validation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            status: "error"
            message: "Validation failed"
            errors:
              - field: "email"
                message: "Email is required"

paths:
  # Authentication endpoints
  /auth/register:
    post:
      tags:
        - Authentication
      summary: ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi
      description: T·∫°o t√†i kho·∫£n ng∆∞·ªùi d√πng m·ªõi v·ªõi email v√† m·∫≠t kh·∫©u
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
                - full_name
              properties:
                username:
                  type: string
                  minLength: 3
                  maxLength: 20
                  example: "john_doe"
                email:
                  type: string
                  format: email
                  example: "john@example.com"
                password:
                  type: string
                  minLength: 6
                  example: "password123"
                full_name:
                  type: string
                  minLength: 2
                  maxLength: 50
                  example: "John Doe"
      responses:
        '201':
          description: ƒêƒÉng k√Ω th√†nh c√¥ng
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: '#/components/schemas/User'
                          accessToken:
                            type: string
                          refreshToken:
                            type: string
        '400':
          $ref: '#/components/responses/ValidationError'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: ƒêƒÉng nh·∫≠p
      description: X√°c th·ª±c ng∆∞·ªùi d√πng v√† tr·∫£ v·ªÅ JWT tokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "john@example.com"
                password:
                  type: string
                  example: "password123"
      responses:
        '200':
          description: ƒêƒÉng nh·∫≠p th√†nh c√¥ng
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: '#/components/schemas/User'
                          accessToken:
                            type: string
                          refreshToken:
                            type: string
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          description: Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/me:
    get:
      tags:
        - Authentication
      summary: L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
      description: Tr·∫£ v·ªÅ th√¥ng tin chi ti·∫øt c·ªßa ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Th√¥ng tin ng∆∞·ªùi d√πng
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  # Project endpoints
  /home/projects:
    get:
      tags:
        - Projects
      summary: L·∫•y danh s√°ch d·ª± √°n
      description: Tr·∫£ v·ªÅ danh s√°ch t·∫•t c·∫£ d·ª± √°n m√† ng∆∞·ªùi d√πng tham gia
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: S·ªë trang
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: S·ªë l∆∞·ª£ng item per page
      responses:
        '200':
          description: Danh s√°ch d·ª± √°n
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          projects:
                            type: array
                            items:
                              $ref: '#/components/schemas/Project'
                          pagination:
                            type: object
                            properties:
                              page:
                                type: integer
                              limit:
                                type: integer
                              total:
                                type: integer
                              totalPages:
                                type: integer
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    post:
      tags:
        - Projects
      summary: T·∫°o d·ª± √°n m·ªõi
      description: T·∫°o m·ªôt d·ª± √°n m·ªõi v·ªõi ng∆∞·ªùi t·∫°o l√†m Owner
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - status
                - priority
              properties:
                name:
                  type: string
                  minLength: 5
                  maxLength: 50
                  example: "Website Redesign Project"
                description:
                  type: string
                  example: "Complete redesign of company website with modern UI/UX"
                status:
                  type: string
                  enum: [planning, in_progress, testing, completed]
                  example: "planning"
                priority:
                  type: string
                  enum: [low, medium, high]
                  example: "high"
                start_date:
                  type: string
                  format: date
                  example: "2024-01-15"
                end_date:
                  type: string
                  format: date
                  example: "2024-03-15"
      responses:
        '201':
          description: D·ª± √°n ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Project'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  # Task endpoints
  /home/tasks:
    get:
      tags:
        - Tasks
      summary: L·∫•y danh s√°ch task
      description: Tr·∫£ v·ªÅ danh s√°ch t·∫•t c·∫£ task m√† ng∆∞·ªùi d√πng c√≥ quy·ªÅn xem
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: S·ªë trang
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: S·ªë l∆∞·ª£ng item per page
        - in: query
          name: project_id
          schema:
            type: string
          description: L·ªçc theo d·ª± √°n
        - in: query
          name: status
          schema:
            type: string
            enum: [todo, in_progress, testing, completed]
          description: L·ªçc theo tr·∫°ng th√°i
      responses:
        '200':
          description: Danh s√°ch task
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          tasks:
                            type: array
                            items:
                              $ref: '#/components/schemas/Task'
                          pagination:
                            type: object
                            properties:
                              page:
                                type: integer
                              limit:
                                type: integer
                              total:
                                type: integer
                              totalPages:
                                type: integer
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /home/tasks/{projectId}:
    post:
      tags:
        - Tasks
      summary: T·∫°o task m·ªõi
      description: T·∫°o m·ªôt task m·ªõi trong d·ª± √°n (c·∫ßn quy·ªÅn create_task)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
          description: ID c·ªßa d·ª± √°n
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - status
                - priority
              properties:
                title:
                  type: string
                  minLength: 1
                  maxLength: 200
                  example: "Design homepage mockup"
                description:
                  type: string
                  example: "Create wireframes and mockups for the new homepage design"
                status:
                  type: string
                  enum: [todo, in_progress, testing, completed]
                  example: "todo"
                priority:
                  type: string
                  enum: [low, medium, high]
                  example: "medium"
                due_date:
                  type: string
                  format: date
                  example: "2024-02-15"
                tags:
                  type: array
                  items:
                    type: string
                  example: ["design", "frontend", "ui"]
      responses:
        '201':
          description: Task ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Task'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # Dashboard endpoints
  /home/dashboards:
    get:
      tags:
        - Dashboard
      summary: L·∫•y th·ªëng k√™ t·ªïng quan
      description: Tr·∫£ v·ªÅ th·ªëng k√™ t·ªïng quan v·ªÅ d·ª± √°n, task v√† ho·∫°t ƒë·ªông c·ªßa ng∆∞·ªùi d√πng
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Th·ªëng k√™ t·ªïng quan
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          totalProjects:
                            type: integer
                            example: 5
                          totalTasks:
                            type: integer
                            example: 23
                          completedTasks:
                            type: integer
                            example: 15
                          pendingTasks:
                            type: integer
                            example: 8
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  # Search endpoints
  /home/search:
    get:
      tags:
        - Search
      summary: T√¨m ki·∫øm to√†n c·ª•c
      description: T√¨m ki·∫øm tr√™n t·∫•t c·∫£ d·ª± √°n, task v√† ng∆∞·ªùi d√πng
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: q
          required: true
          schema:
            type: string
            minLength: 1
          description: T·ª´ kh√≥a t√¨m ki·∫øm
          example: "design"
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
          description: S·ªë l∆∞·ª£ng k·∫øt qu·∫£ t·ªëi ƒëa
      responses:
        '200':
          description: K·∫øt qu·∫£ t√¨m ki·∫øm
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          projects:
                            type: array
                            items:
                              $ref: '#/components/schemas/Project'
                          tasks:
                            type: array
                            items:
                              $ref: '#/components/schemas/Task'
                          users:
                            type: array
                            items:
                              $ref: '#/components/schemas/User'
                          total:
                            type: integer
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  # Notification endpoints
  /home/noti:
    get:
      tags:
        - Notifications
      summary: L·∫•y t·∫•t c·∫£ th√¥ng b√°o
      description: Tr·∫£ v·ªÅ danh s√°ch th√¥ng b√°o c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: S·ªë trang
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 20
          description: S·ªë l∆∞·ª£ng th√¥ng b√°o per page
      responses:
        '200':
          description: Danh s√°ch th√¥ng b√°o
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Notification'
        '401':
          $ref: '#/components/responses/UnauthorizedError'