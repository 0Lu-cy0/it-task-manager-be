import { projectModel } from '~/models/projectModel'
import { ApiError } from '~/utils/ApiError'
import { StatusCodes } from 'http-status-codes'
import { MESSAGES } from '~/constants/messages'
import { projectRolesModel } from '~/models/projectRolesModel'
import { getPermissionId } from '~/utils/permission'

/**
 * T·∫°o m·ªôt d·ª± √°n m·ªõi trong c∆° s·ªü d·ªØ li·ªáu
 * @param {Object} data - D·ªØ li·ªáu d·ª± √°n
 * @returns {Object} D·ª± √°n ƒë√£ ƒë∆∞·ª£c t·∫°o
 * @throws {Error} N·∫øu l·ªói x·∫£y ra khi t·∫°o d·ª± √°n
 */
const createNew = async (data) => {
  return await projectModel.create(data)
}

/**
 * L·∫•y th√¥ng tin d·ª± √°n theo ID
 * @param {string} id - ID c·ªßa d·ª± √°n
 * @returns {Object} Th√¥ng tin d·ª± √°n v·ªõi d·ªØ li·ªáu li√™n quan ƒë∆∞·ª£c populate
 * @throws {ApiError} N·∫øu d·ª± √°n kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a m·ªÅm
 */
const findOneById = async (id) => {
  const project = await projectModel
    .findById(id)
    .populate('created_by', 'name email')
    .populate('members.user_id', 'name email')
    .populate('members.project_role_id', 'name')
    .populate({
      path: 'tasks',
      match: { _destroy: false },
      select: 'name priority description status',
    })
    .lean()
    .exec()
  if (!project || project._destroy) {
    throw new ApiError(StatusCodes.NOT_FOUND, MESSAGES.PROJECT_NOT_FOUND)
  }
  return project
}

/**
 * L·∫•y danh s√°ch d·ª± √°n theo b·ªô l·ªçc
 * @param {Object} [filter={ _destroy: false }] - B·ªô l·ªçc truy v·∫•n
 * @param {Object} [sort={ created_at: -1 }] - Ti√™u ch√≠ s·∫Øp x·∫øp
 * @param {Object} [options={}] - T√πy ch·ªçn truy v·∫•n (ph√¢n trang, gi·ªõi h·∫°n, v.v.)
 * @returns {Array} Danh s√°ch d·ª± √°n v·ªõi d·ªØ li·ªáu li√™n quan ƒë∆∞·ª£c populate
 * @throws {ApiError} N·∫øu b·ªô l·ªçc kh√¥ng h·ª£p l·ªá
 */
const getAll = async (filter = { _destroy: false }, sort = { created_at: -1 }, options = {}) => {
  if (!filter || typeof filter !== 'object') {
    throw new ApiError(StatusCodes.BAD_REQUEST, MESSAGES.INVALID_FILTER)
  }
  const projects = await projectModel
    .find(filter)
    .sort(sort)
    .setOptions(options)
    .select('-start_date -created_by -deputy_lead -created_at -updated_at -__v')
    .lean()
    .exec()
  return projects
}

/**
 * C·∫≠p nh·∫≠t th√¥ng tin d·ª± √°n
 * @param {string} projectId - ID c·ªßa d·ª± √°n
 * @param {Object} updateData - D·ªØ li·ªáu c·∫ßn c·∫≠p nh·∫≠t
 * @returns {Object} D·ª± √°n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
 * @throws {ApiError} N·∫øu d·ª± √°n kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a m·ªÅm
 */
const update = async (projectId, updateData) => {
  const project = await projectModel.findById(projectId)
  if (!project || project._destroy) {
    throw new ApiError(StatusCodes.NOT_FOUND, MESSAGES.PROJECT_NOT_FOUND)
  }
  return await projectModel
    .findByIdAndUpdate(projectId, updateData, { new: true })
    .populate('created_by', 'name email')
    .populate('members.user_id', 'name email')
    .populate('members.project_role_id', 'name')
    .exec()
}

/**
 * Th√™m th√†nh vi√™n v√†o d·ª± √°n
 * @param {string} projectId - ID c·ªßa d·ª± √°n
 * @param {Object} memberData - Th√¥ng tin th√†nh vi√™n (user_id, project_role_id, joined_at)
 * @returns {Object} D·ª± √°n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
 * @throws {ApiError} N·∫øu d·ª± √°n kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a m·ªÅm
 */
const addMember = async (projectId, memberData) => {
  const project = await projectModel.findById(projectId)
  if (!project || project._destroy) {
    throw new ApiError(StatusCodes.NOT_FOUND, MESSAGES.PROJECT_NOT_FOUND)
  }
  project.members.push(memberData)
  project.member_count = project.members.length
  const savedProject = await project.save()

  return await savedProject.populate([
    { path: 'created_by', select: 'name email' },
    { path: 'members.user_id', select: 'name email' },
    { path: 'members.project_role_id', select: 'name' },
  ])
}

/**
 * X√≥a th√†nh vi√™n kh·ªèi d·ª± √°n
 * @param {string} projectId - ID c·ªßa d·ª± √°n
 * @param {string} userId - ID c·ªßa th√†nh vi√™n c·∫ßn x√≥a
 * @returns {Object} D·ª± √°n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
 * @throws {ApiError} N·∫øu d·ª± √°n kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a m·ªÅm
 */
const removeMember = async (projectId, userId) => {
  const project = await projectModel.findById(projectId)
  if (!project || project._destroy) {
    throw new ApiError(StatusCodes.NOT_FOUND, MESSAGES.PROJECT_NOT_FOUND)
  }
  project.members = project.members.filter(member => member.user_id.toString() !== userId)
  project.member_count = project.members.length
  return await project
    .save()
    .then(doc =>
      doc
        .populate('created_by', 'name email')
        .populate('members.user_id', 'name email')
        .populate('members.project_role_id', 'name')
        .execPopulate(),
    )
}

/**
 * C·∫≠p nh·∫≠t vai tr√≤ c·ªßa th√†nh vi√™n trong d·ª± √°n
 * @param {string} projectId - ID c·ªßa d·ª± √°n
 * @param {string} userId - ID c·ªßa th√†nh vi√™n
 * @param {string} projectRoleId - ID c·ªßa vai tr√≤ m·ªõi
 * @param {Object} [session=null] - Session cho transaction (n·∫øu c√≥)
 * @returns {Object} D·ª± √°n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
 * @throws {ApiError} N·∫øu d·ª± √°n ho·∫∑c th√†nh vi√™n kh√¥ng t·ªìn t·∫°i
 */
const updateMemberRole = async (projectId, userId, projectRoleId, session = null) => {
  const project = await projectModel.findById(projectId).session(session)
  if (!project || project._destroy) {
    throw new ApiError(StatusCodes.NOT_FOUND, MESSAGES.PROJECT_NOT_FOUND)
  }

  // Update role cho user trong members
  const updatedProject = await projectModel
    .findOneAndUpdate(
      { _id: projectId, 'members.user_id': userId },
      { $set: { 'members.$.project_role_id': projectRoleId } },
      { new: true, session },
    )
    .populate('created_by', 'name email')
    .populate('members.user_id', 'name email')
    .populate('members.project_role_id', 'name')
    .exec()

  if (!updatedProject) {
    throw new ApiError(StatusCodes.NOT_FOUND, MESSAGES.USER_NOT_MEMBER)
  }

  return updatedProject
}

/**
 * Ki·ªÉm tra quy·ªÅn c·ªßa user trong d·ª± √°n
 * @param {string} projectId - ID c·ªßa d·ª± √°n
 * @param {string} userId - ID c·ªßa user
 * @param {string} permissionName - T√™n quy·ªÅn c·∫ßn ki·ªÉm tra
 * @returns {boolean} K·∫øt qu·∫£ ki·ªÉm tra quy·ªÅn
 * @throws {ApiError} N·∫øu d·ª± √°n kh√¥ng t·ªìn t·∫°i ho·∫∑c free_mode t·∫Øt khi ch·ªânh s·ª≠a permission
 */
const checkUserPermission = async (projectId, userId, permissionName) => {
  try {

    // 1Ô∏è‚É£ T√¨m project ch·ª©a user n√†y
    const project = await projectModel.findOne({
      _id: projectId,
      'members.user_id': userId,
    }).lean()

    if (!project) {
      throw new ApiError(StatusCodes.NOT_FOUND, MESSAGES.PROJECT_NOT_FOUND)
    }

    // 2Ô∏è‚É£ N·∫øu project ƒëang t·∫Øt free_mode th√¨ ch·∫∑n lu√¥n vi·ªác ch·ªânh s·ª≠a permission
    if (
      !project.free_mode && permissionName === 'change_member_role') {
      throw new ApiError(
        StatusCodes.FORBIDDEN,
        'Kh√¥ng th·ªÉ th·ª±c hi·ªán h√†nh ƒë·ªông n√†y v√¨ ch·∫ø ƒë·ªô free_mode ƒëang b·ªã t·∫Øt',
      )
    }

    // 3Ô∏è‚É£ L·∫•y t·∫•t c·∫£ roles c·ªßa user trong project
    const memberRoles = project.members
      .filter((m) => m.user_id.toString() === userId.toString())
      .map((m) => m.project_role_id)

    if (memberRoles.length === 0) {
      return false
    }

    // 4Ô∏è‚É£ N·∫øu free_mode b·∫≠t th√¨ owner ƒë∆∞·ª£c bypass
    if (project.free_mode) {
      const ownerRole = await projectRolesModel.findOne(
        {
          _id: { $in: memberRoles },
          name: 'owner',
        },
        { _id: 1 },
      ).lean()
      console.log('üü° [checkUserPermission] Owner role found (bypass):', !!ownerRole)
      if (ownerRole) return true
    }

    // 5Ô∏è‚É£ Check permission b√¨nh th∆∞·ªùng
    const permissionId = await getPermissionId(permissionName)

    const role = await projectRolesModel.findOne(
      {
        _id: { $in: memberRoles },
        permissions: permissionId,
      },
      { _id: 1 },
    ).lean()

    return !!role
  } catch (error) {
    console.error('‚ùå [checkUserPermission] Error:', error.message)
    throw error
  }
}


/**
 * X√≥a m·ªÅm d·ª± √°n
 * @param {string} projectId - ID d·ª± √°n
 * @returns {Promise<boolean>} - K·∫øt qu·∫£ x√≥a
 */
const softDelete = async (projectId) => {
  const project = await projectModel.findById(projectId)
  if (!project || project._destroy) {
    return false // ho·∫∑c throw ApiError(StatusCodes.CONFLICT, 'Project already deleted')
  }
  await projectModel.findByIdAndUpdate(projectId, {
    _destroy: true,
    deleted_at: new Date(),
  })
  return true
}

/**
 * C·∫≠p nh·∫≠t free_mode c·ªßa project
 * @param {string} projectId
 * @param {boolean} freeModeValue
 * @returns {Object} Project ƒë√£ c·∫≠p nh·∫≠t
 * @throws {ApiError} N·∫øu project kh√¥ng t·ªìn t·∫°i
 */
const updateFreeMode = async (projectId, freeModeValue) => {
  const project = await projectModel.findById(projectId)
  if (!project || project._destroy) {
    throw new ApiError(StatusCodes.NOT_FOUND, MESSAGES.PROJECT_NOT_FOUND)
  }
  project.free_mode = freeModeValue
  await project.save()
  return project
}

export const projectRepository = {
  createNew,
  findOneById,
  getAll,
  update,
  softDelete,
  addMember,
  removeMember,
  updateMemberRole,
  checkUserPermission,
  updateFreeMode,
}
